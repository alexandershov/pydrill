text: |
  {% set cls, method, result = gen.choice([
    ('ByteCode', 'get_header', 3405691582),
    ('Blink182', 'get_best_song', 'Anthem (Part 2)'),
    ('Year2015', 'get_best_movie', 'What We Do In The Shadows'),
  ]) %}

  {% filter highlight %}
    def log(fn):
        # @functools.wraps(fn) is left out for educational reasons
        def logging_fn(*args, **kwargs):
            print('calling', fn)
            return fn(*args, **kwargs)
        return logging_fn

    class {{ cls }}(object):
        @log
        @staticmethod
        def {{ method }}():
          return {{ result|repr }}
  {% endfilter %}

  What is the value of {% filter highlight_inline %}{{ cls }}().{{ method }}(){% endfilter %}?
difficulty: 2
answers:
  - is_correct: true
    text: TypeError is raised
  - is_correct: false
    text: '{{ result|repr }}'
explanation: |
  <div class="paragraph">
    {% filter highlight('pycon') %}
      >>> {{ cls }}().{{ method }}()
      calling <staticmethod object at 0x7f0dcb634788>
      TypeError: 'staticmethod' object is not callable
    {% endfilter %}
    Oops! What happened? Let's go through this step by step.
  </div>
  <div class="paragraph">
    {% filter highlight('pycon') %}
      >>> {{ cls }}().{{ method }}
      <bound method {{ cls }}.logging_fn of <{{ cls }} object at 0x7f1021847d50>>
    {% endfilter %}
    See it? {% filter highlight_inline %}{{ cls }}().{{ method }}{% endfilter %} is actually a "normal"
    (non-static) method. Why? That's because {% filter highlight_inline %}@log{% endfilter %}
    decorator is applied after the {{ '@staticmethod'|highlight_inline }} and returns an ordinary function. And ordinary function inside of the class body
    becomes a "normal" (non-static) method.
  </div>
  <div class="paragraph">
    Here's what happens when we call {% filter highlight_inline %}{{ cls }}().{{ method }}(){% endfilter %}.

    {% filter highlight('pycon') %}
      >>> {{ cls }}().{{ method }}()
      calling <staticmethod object at 0x7f0dcb634788>
      TypeError: 'staticmethod' object is not callable
    {% endfilter %}
    Yeah, {{ 'fn'|highlight_inline }} (inside of the {{ 'logging_fn'|highlight_inline }})
    is not an ordinary function.
    It's a {{ 'staticmethod'|highlight_inline }} object. By the way, {{ '@staticmethod'|highlight_inline }} decorator
     can be used outside of the class definition:
     {% filter highlight('pycon') %}
       >>> @staticmethod
       ... def testing_static():
       ...    return 'it works!'
       >>> type(testing_static)
       staticmethod
       >>> callable(testing_static)
       False
     {% endfilter %}
     That's the problem right here! {{ '@staticmethod'|highlight_inline }} creates, ahem, a {{ 'staticmethod'|highlight_inline }}
     object from a function. {{ 'staticmethod'|highlight_inline }} instances are
     <a href="https://docs.python.org/2/howto/descriptor.html">descriptors</a>, and they're not callable.
  </div>
  <div class="paragraph">
    If we want to apply a decorator to a static method, then we should put
    {% filter highlight_inline %}@staticmethod{% endfilter %} at the top:

    {% filter highlight %}
      class {{ cls }}(object):
          @staticmethod
          @log
          def {{ method }}():
            return {{ result|repr }}
    {% endfilter %}

    {% filter highlight('pycon') %}
      >>> {{ cls }}.{{ method }}()
      calling <function {{ method }} at 0x7f9fe9b166e0>
      {{ result|repr }}
    {% endfilter %}
  </div>


