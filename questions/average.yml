text: |
  {% set x = gen.integer(1, 5) %}
  {% set y = x + 2 * gen.integer(0, 2) + 1 %}
  {% set var = gen.var_name() %}

  {% filter highlight %}
    {{ var }} = ({{ x }} + {{ y }}) / 2
  {% endfilter %}

  What is the value of {{ var|highlight_inline }}?
answers:
  - is_correct: true
    text: '{{ (x + y) // 2 }}'
  - is_correct: false
    text: '{{ (x + y) / 2.0 }}'
difficulty: 1
explanation: |
  <div class="paragraph">
    We probably wanted to get {% filter highlight_inline %}{{ (x + y) / 2 }}{% endfilter %},
    but in Python 2.7 integer division truncates its result and the answer is
    {% filter highlight_inline %}{{ (x + y) // 2}}{% endfilter %}.
    That sucks. What can we do about it?
  </div>
  <div class="paragraph">
    <strong>1.</strong> The most radical way is to use Python 3:
    {% filter highlight('pycon') %}
      ATTENTTION: PYTHON 3
      Python 3.4.0 (default, Apr 11 2014, 13:05:11)
      [GCC 4.8.2] on linux
      Type "help", "copyright", "credits" or "license" for more information.
      >>> ({{ x }} + {{ y }}) / 2
      {{ (x + y) / 2 }} # yay!
      >>> # ATTENTION: THAT WAS PYTHON 3
    {% endfilter %}
    That's all well and good, but everybody knows that
    <abbr title="Joke alert!">Python 2.7 is the future of Python</abbr>.
    So let's stick to Python 2.7.
  </div>
  <div class="paragraph">
    <strong>2.</strong> We can convert numerator
    (that's {% filter highlight_inline %}{{ x }} + {{ y }}{% endfilter %})
    or denumerator (that's {{ 2|highlight_inline }}) to a floating point number:
    {% filter highlight('pycon') %}
      >>> float({{ x }} + {{ y }}) / 2
      {{ (x + y) / 2 }} # yay!
      >>> ({{ x }} + {{ y }}) / float(2)
      {{ (x + y) / 2 }} # yay!
      >>> ({{ x }} + {{ y }}) / 2.0
      {{ (x + y) / 2 }} # yay!
    {% endfilter %}
  </div>
  <div class="paragraph">
    <strong>3.</strong> We can start our python modules with the line
    {% filter highlight_inline %}from __future__ import division{% endfilter %}
    {% filter highlight('pycon') %}
      # make python2 to use python3-style division IN THE CURRENT MODULE ONLY!
      >>> from __future__ import division
      >>> ({{ x }} + {{ y }}) / 2
      {{ (x + y) / 2 }} # yay!
    {% endfilter %}
    This way you can have the best of both worlds: {{ '/'|highlight_inline }} works as expected
    and returns a float. And if you want your good ol' truncating division back,
    {{ '//'|highlight_inline }} is always available:
    {% filter highlight('pycon') %}
      >>> from __future__ import division
      >>> ({{ x }} + {{ y }}) / 2
      {{ (x + y) / 2 }} # yay!
      >>> ({{ x }} + {{ y }}) // 2
      {{ (x + y) // 2}} # okay
    {% endfilter %}

    Just be careful: {% filter highlight_inline %}from __future__ import division{% endfilter %}
    affects only the <em>current</em> module. If you have two modules {{ 'divide.py'|highlight_inline }}
    and {{ 'conquer.py'|highlight_inline }} with {% filter highlight_inline %}from __future__ import division{% endfilter %} in
    {{ 'divide.py'|highlight_inline }}, then {{ 'conquer.py'|highlight_inline }} is not affected by
    this line even if {{ 'divide.py'|highlight_inline }} imports {{ 'conquer.py'|highlight_inline }}:
    {% filter highlight %}
      # module conquer.py
      def division(x, y):
          return x / y
    {% endfilter %}

    {% filter highlight %}
      # module divide.py
      from __future__ import division

      import conquer

      def division(x, y):
          return x / y

      division({{ x + y }}, 2)  # returns {{ (x + y) / 2 }}

      # conquer.py is not affected by `from __future__ import division`
      conquer.division({{ x + y }}, 2)  # returns {{ (x + y) // 2 }}
    {% endfilter %}


  </div>
  <div class="paragraph">
    Extra reading:
    <ul>
      <li>
        <a href="https://www.python.org/dev/peps/pep-0238/">Changing the Division Operator (PEP-238)</a>
      </li>
    </ul>
  </div>


